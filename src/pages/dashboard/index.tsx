import { Session } from "next-auth";
import { signOut, useSession } from "next-auth/react";
import Head from "next/head";
import { ChangeEvent, useState } from "react";
import { Footer } from "~/components/Footer";
import { Nav } from "~/components/Nav";
import Image from "next/image";

import { isAdmin } from "~/utils/isAdmin";
import { api } from "~/utils/api";
import { TutoringSession } from "@prisma/client";
import Link from "next/link";
import { Input } from "~/components/Input";


const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]

export default function Dashboard() {
    const { data: session, status } = useSession()

    if(status === "unauthenticated") return window.open('/', '_self')
    
    return (
        <>
            <Head>
                <title>PB Tutoring</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" type="image/svg+xml" href="/public/favicon.svg" />
            </Head>
            <main className="bg-blue-800 min-h-screen relative flex flex-col gap-0 justify-between">
                <div>
                    <Nav />
                    <div className="flex flex-col py-16 px-8 sm:p-16 xl:px-32 2xl:p-32 gap-8">
                        {status === "loading"
                            ? <h1>Loading...</h1>
                            : !isAdmin(session?.user.email)
                                    ? <NormalDashboard session={session} />
                                    : <AdminDashboard session={session} />
                        }
                    </div>
                </div>
                <Footer />
            </main>
        </>
    )
}

function AdminSession({session}: {session: TutoringSession}) {
    // const [editMode, setEditMode] = useState(false);

    return <div className="bg-white w-full rounded-lg flex flex-col sm:flex-row" key={session.id}>
        <div className="p-4 sm:px-8">
            <div className="flex flex-col sm:flex-row sm:gap-4">
                <p className="font-bold text-sm sm:text-base">{session.label}</p>
                <div className={`px-2 py-1 my-2 sm:my-0 rounded-full bg-gray-100 flex flex-row gap-2 text-xs items-center ${session.booked ? "bg-yellow-200" : "bg-green-200"}`}>
                    <span className={`h-3 w-3 rounded-full ${session.booked ? "bg-yellow-400" : "bg-green-400"}`}></span>
                    <span>{session.booked ? "Booked" : "Open"}</span>
                </div>
            </div>
        <div className="font-semibold text-[10px] flex flex-row gap-2">
            <p className="flex flex-row items-center gap-1">
            <Image width={10} height={10} alt="" src="/clock.svg" />
            <span>{session.date} {session.time}</span>
            </p>
            <p className="flex flex-row items-center gap-1">
            <Image width={10} height={10} alt="@" src="map-pin.svg" />
            <span>{session.location}</span>
            </p>
        </div>
        </div>
        <Link href={`/dashboard/session/${session.id}`} className="sm:ml-auto justify-center sm:justify-normal text-xs 2xl:text-base px-2 2xl:px-4 md:px-8 py-3 sm:py-4 bg-red-600 font-semibold text-white flex flex-row items-center gap-2 rounded-b-lg sm:rounded-bl-none sm:rounded-r-lg hover:gap-4 duration-100 shadow-lg sm:shadow-none">
            <span>Edit</span>
            <Image src="/chevron-right.svg" alt="&gt;" height={16} width={16} />
        </Link>
    </div>
}

function AdminDashboard({session}: {session: Session|null}) {
    const [isCreateOpen, setCreateOpen] = useState(false)
    const [isListOpen, setListOpen] = useState(true)

    const date = new Date()
    const month = months[date.getMonth()]

    const [createLabel, setCreateLabel] = useState("Math Tutoring - One on One")
    const [createLocation, setCreateLocation] = useState("2801 Orange St NLR")
    const [createDate, setCreateDate] = useState(`${month} ${date.getDate()}`)
    const [createTime, setCreateTime] = useState("5-7:00pm")

    const createMutation = api.session.create.useMutation()
    const {data: sessions} = api.session.list.useQuery()


    const createSession = () => {
        setCreateLabel("");
        setCreateLocation("");
        setCreateDate("");
        setCreateTime("");

        createMutation.mutate({
            label: createLabel,
            location: createLocation,
            date: createDate,
            time: createTime
        });

        setCreateOpen(false)
    }

    return <>
        <div>
            <h1 className="text-white font-semibold text-2xl">Admin Dashboard</h1>
            <p className="text-white text-sm">You are currently signed in as {session?.user.email} - <a className="underline cursor-pointer" onClick={() => signOut()}>Sign Out</a></p>
        </div>
        <div className="bg-blue-900 rounded-lg overflow-hidden flex flex-col">
            <div className="flex flex-row p-4 rounded-t-lg items-center cursor-pointer" onClick={() => setCreateOpen(!isCreateOpen)}>
                <p className="text-white font-semibold">Create a new session</p>
                {isCreateOpen
                    ? <Image src="/chevron-up.svg" alt="Open" className="h-4 ml-auto" height={16} width={16} />
                    : <Image src="/chevron-down.svg" alt="Open" className="h-4 ml-auto" height={16} width={16} />
                }
            </div>
            {isCreateOpen && <div className="px-4 pb-4 rounded-b-lg flex flex-col gap-2">
                <Input placeholder="Label (Math Tutoring - One on One)" value={createLabel} onChange={(event: ChangeEvent<HTMLInputElement>) => setCreateLabel(event.target.value)} />
                <Input placeholder="Location (2801 Orange St NLR)" value={createLocation} onChange={(event: ChangeEvent<HTMLInputElement>) => setCreateLocation(event.target.value)} />
                <Input placeholder={`Date (${month} ${date.getDate()})`} value={createDate} onChange={(event: ChangeEvent<HTMLInputElement>) => setCreateDate(event.target.value)} />
                <Input placeholder="Time (5-7:00pm)" value={createTime} onChange={(event: ChangeEvent<HTMLInputElement>) => setCreateTime(event.target.value)} />
                <button className="bg-red-600 text-white cursor-pointer rounded-lg font-semibold px-4 py-2" onClick={() => createSession()}>Create Session</button>
            </div>}
        </div>
        <div className="bg-blue-900 rounded-lg overflow-hidden flex flex-col">
            <div className="flex flex-row p-4 rounded-t-lg items-center cursor-pointer" onClick={() => setListOpen(!isListOpen)}>
                <p className="text-white font-semibold">Sessions List</p>
                {isListOpen
                    ? <Image src="/chevron-up.svg" alt="Open" className="h-4 ml-auto" height={16} width={16} />
                    : <Image src="/chevron-down.svg" alt="Open" className="h-4 ml-auto" height={16} width={16} />
                }
            </div>
            {isListOpen && <div className="px-4 pb-4 rounded-b-lg flex flex-col gap-2">
                {sessions?.map((sess) =>
                    <AdminSession session={sess} key={sess.id}/>
                )}
            </div>}
        </div>
    </>
}
function NormalDashboard({session}: {session: Session|null}) {
    return <>
        <div>
            <h1 className="text-white font-semibold text-2xl">Customer Dashboard</h1>
            <p className="text-white text-sm">You are currently signed in as {session?.user.email} - <a className="underline cursor-pointer" onClick={() => signOut()}>Sign Out</a></p>
        </div>
    </>
}