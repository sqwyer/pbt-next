// generator client {
//     provider = "prisma-client-js"
// }

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// datasource db {
//   provider          = "postgresql"
//   url               = env("DATABASE_URL")
//   directUrl         = env("DIRECT_URL")
// }

generator client {
  provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    // id                Int     @id @default(autoincrement())
    userId            String  @db.ObjectId
    // userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    // id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       String   @db.ObjectId
    // userId       Int      
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TutoringSession {
    createdAt DateTime @default(now())
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    // id        Int      @id @default(autoincrement())
    userId    String?  @db.ObjectId
    // userId    Int?
    label     String
    date      String
    time      String
    location  String
    booked    Boolean?
    user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String             @id @default(auto()) @map("_id") @db.ObjectId
    // id               Int                @id @default(autoincrement())
    name             String?
    email            String?            @unique
    emailVerified    DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    tutoringSessions TutoringSession[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    // id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
